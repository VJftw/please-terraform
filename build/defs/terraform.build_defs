"""Build rules for working with Hashicorp Terraform (https://terraform.io)
"""

def terraform_toolchain(name:str, version:str, hashes:list = [], labels: list = [], visibility:list = []):
    """Build rule for obtaining a version of the Terraform CLI.
    Args:
        name: The name of the build rule.
        version: The version of Terraform to download in MAJOR.MINOR.PATCH format. e.g. "0.12.3".
        hashes: The hashes to verify the downloaded archive against.
        labels: The additonal labels to add to the build rule.
        visibility: The targets to make the toolchain visible to.
    """
    _validate_config()
    download=remote_file(
        name = f"_{name}_download",
        out = f"_{name}_download",
        url = f"https://releases.hashicorp.com/terraform/{version}/terraform_{version}_{CONFIG.OS}_{CONFIG.ARCH}.zip",
        hashes = hashes,
        extract = True,
    )
    return genrule(
        name=name,
        srcs=[download],
        # We output into a directory so we can add `terraform` to the PATH at runtime.
        outs=[f"_{name}_download/terraform"],
        cmd="mkdir -p $(dirname $OUTS) && mv $SRCS/terraform $OUTS",
        visibility = visibility,
        binary = True,
    )

def terraform_module(
    name: str,
    srcs: list = None,
    aliases: list = [],
    deps: list = [],
    labels: list = [],
    visibility: list = [],
):
    """Build rule for obtaining a remote Terraform Module or defining a local Terraform module.
    Args:
        name: The name of the build rule.
        srcs: The source Terraform files for the Terraform module.
        aliases: Additional aliases to replace with the module.
        deps: The modules that this module depends on.
        labels: The additonal labels to add to the build rule.
        visibility: The targets to make the toolchain visible to.
    """
    _validate_config()
    deps=[canonicalise(dep) for dep in deps]
    deps_flags = [f"--deps=\"$(location {d})\"" for d in deps]
    deps_cmd = " ".join(deps_flags)

    aliases_flags = [f"--aliases=\"{a}\"" for a in aliases]
    aliases_cmd = " ".join(aliases_flags)

    return genrule(
        name = name,
        srcs = srcs,
        outs = [name],
        exported_deps = deps,
        deps = deps,
        visibility = visibility,
        tools = [CONFIG.TERRAFORM.TOOL],
        labels = ["terraform_configuration"] + labels,
        cmd = f"""
set -x
$TOOLS -vvvvv module local \\
    {deps_cmd} \\
    {aliases_cmd} \\
    --pkg="$PKG" \\
    --name="$NAME" \\
    --srcs="$SRCS" \\
    --out="$OUTS"
    """,
    )

def terraform_registry_module(
    name: str,
    registry: str = "https://registry.terraform.io",
    module: str,
    version: str,
    aliases: list = [],
    strip: list = [],
    deps: list = [],
    hashes: list = [],
    licences: list = [],
    labels: list = [],
    visibility: list = [],
):
    """Build rule for obtaining a remote Terraform Module or defining a local Terraform module.
    Args:
        name: The name of the build rule.
        registry: The Terraform registry address that implements the Terraform module protocol.
                  defaults to https://registry.terraform.io
        module: The name of the module in the Terraform registry.
        version: The version of module in the Terraform registry.
        aliases: Additional aliases to replace with the module.
        strip: A list of directories to strip from the Terraform module.
        deps: The modules that this module depends on.
        hashes: A list of hashes to compare the Terraform module to.
        licences: A list of licences that the Terraform module has.
        labels: The additonal labels to add to the build rule.
        visibility: The targets to make the toolchain visible to.
    """
    _validate_config()
    mod_namespace=module.split("/")[0]
    mod_name=module.split("/")[1]
    mod_provider=module.split("/")[2]

    deps=[canonicalise(dep) for dep in deps]
    deps_flags = [f"--deps=\"$(location {d})\"" for d in deps]
    deps_cmd = " ".join(deps_flags)

    strip_flags = [f"--strip=\"{s}\"" for s in strip]
    strip_cmd = " ".join(strip_flags)

    aliases_flags = [f"--aliases=\"{a}\"" for a in aliases]
    aliases_cmd = " ".join(aliases_flags)

    return genrule(
        name = name,
        outs = [name],
        exported_deps=deps,
        deps=deps,
        visibility=visibility,
        tools=[CONFIG.TERRAFORM.TOOL],
        cmd = f"""
set -x
$TOOLS -vvvvv module registry \\
    --name="{name}" \\
    {aliases_cmd} \\
    {deps_cmd} \\
    {strip_cmd} \\
    --out="$OUTS" \\
    --registry="{registry}" \\
    --namespace="{mod_namespace}" \\
    --module_name="{mod_name}" \\
    --provider="{mod_provider}" \\
    --version="{version}" \\
    --pkg="$PKG"
    """,
    )

def terraform_root(
    name: str,
    srcs: list,
    vars: dict = {},
    var_files: list = [],
    modules: list = [],
    toolchain: str = None,
    labels: list = [],
    visibility: list = [],
    add_default_workflows: bool = True,
    additional_workspace_data: list = [],
    pre_workspace_cmd: str = "",
    post_workspace_cmd: str = "",
):
    """Build rule for running Terraform against Terraform configuration.
    Args:
        name: The name of the build rule.
        srcs: The source Terraform files for the root module.
        vars: The literal Terraform vars to pass into the root module.
        var_files: The Terraform var files passed into the root module.
        modules: The Terraform modules that the srcs use.
        toolchain: The Terraform toolchain to use with against the srcs.
        labels: The additonal labels to add to the build rule.
        visibility: The targets to make the toolchain visible to.
        add_default_workflows: Whether or not to include the default Terraform workflows as Please targets (_plan, _apply, _destroy, _validate).
        additional_workspace_data: Additional data to include at Terraform runtime.
        pre_workspace_cmd: Additional commands to run to execute before executing Terraform commands.
        post_workspace_cmd: Additional commands to run to execute after executing Terraform commands.
    """
    _validate_config()

    if vars:
        json_vars = json(vars)
        vars_file=genrule(
            name = f"{name}_vars",
            outs = [f"{name}_vars.tfvars.json"],
            cmd = f"echo '{json_vars}' > $OUTS",
        )
        var_files += [vars_file]

    var_file_flags = [f"--var_files=\"$(location {var_file})\"" for var_file in var_files]
    var_files_cmd = " ".join(var_file_flags)

    modules_flags = [f"--modules=\"$(location {module})\"" for module in modules]
    modules_cmd = " ".join(modules_flags)

    if CONFIG.TERRAFORM.EXTRA_TERRAFORM_ROOT_SRC:
        srcs += [CONFIG.TERRAFORM.EXTRA_TERRAFORM_ROOT_SRC]

    # build a Terraform root workspace
    root=genrule(
        name = f"_{name}_root",
        outs = [f"{name}_root"],
        tools = [CONFIG.TERRAFORM.TOOL],
        deps = modules,
        srcs = {
            "srcs": srcs,
            "modules": modules,
            "var_files": var_files,
        },
        cmd = f"""
$TOOLS -vvvv root build \\
    {var_files_cmd} \\
    {modules_cmd} \\
    --pkg="$PKG" \\
    --name="{name}" \\
    --os="{CONFIG.OS}" \\
    --arch="{CONFIG.ARCH}" \\
    --out="$OUTS" \\
    --pkg_dir="$PKG_DIR" \\
    --srcs="$SRCS_SRCS"
        """,
    )

    # determine the terraform binary to use
    if not toolchain and not CONFIG.TERRAFORM.DEFAULT_TOOLCHAIN:
        fail("no 'toolchain' or 'terraform.DefaultToolchain' specified.")

    toolchain = toolchain or CONFIG.TERRAFORM.DEFAULT_TOOLCHAIN

    virtualenv = sh_cmd(
        name = name,
        shell = "/usr/bin/env bash",
        cmd = f"""
set -Eeuo pipefail
# Source the workspace (virtual environment) for running Terraform commands.
source <($(out_location {CONFIG.TERRAFORM.TOOL}) root virtualenv \\
    --terraform_binary="$(out_exe {toolchain})" \\
    --os="$OS" \\
    --arch="$ARCH" \\
    --root_module="$(out_location {root})" \\
    )

# Run pre commands
{pre_workspace_cmd}

# Run the provided commands in a subshell, if any.
(eval "set -x; "\\\$*"")

# Run post commands
{post_workspace_cmd}
        """,
        data = [root, toolchain, CONFIG.TERRAFORM.TOOL] + modules + additional_workspace_data,
        labels = [f"terraform_root", "terraform_configuration"] + labels,
        visibility = visibility,
    )

    if add_default_workflows:
        default_workflows = {
            "plan": "terraform init && terraform plan",
            "apply": "terraform init && terraform apply",
            "destroy": "terraform init && terraform destroy",
            "validate": "terraform init -backend=false && terraform validate",
        }

        for workflow in default_workflows.keys():
            cmd = default_workflows[workflow]

            sh_cmd(
                name = f"{name}_{workflow}",
                shell = "/usr/bin/env bash",
                data = [virtualenv],
                cmd = f"$(out_exe {virtualenv}) \"{cmd} \\\$@\"",
                labels = [f"terraform_{workflow}"],
            )

    return virtualenv

def _validate_config():
    default_terraform_tools = [
        "///terraform//third_party/binary:please_terraform",
        "//third_party/binary:please_terraform",
    ]
    if CONFIG.TERRAFORM.TOOL not in default_terraform_tools and CONFIG.TERRAFORM.TOOL_VERSION:
        fail(f"terraform.ToolVersion should only be set when terraform.Tool is the default value (currently: '{CONFIG.TERRAFORM.TOOL}').")

def _terraform_tool():
    _validate_config()
    if CONFIG.TERRAFORM.TOOL_VERSION:
        remote_file(
            name = "please_terraform",
            url = f"https://github.com/VJftw/please-terraform/releases/download/{CONFIG.TERRAFORM.TOOL_VERSION}/please_terraform",
            visibility = ["PUBLIC"],
            binary = True,
        )
